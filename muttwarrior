#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" for mutt and taskwarrior
"""

import sys
import email
from email.header import decode_header
import os
from taskw import TaskWarrior
from xdg import BaseDirectory as xbase
from ConfigParser import SafeConfigParser
# from pprint import pprint


CFG_SECT = 'muttwarrior'

CONFIG_DEFAULT = {
    'taskrc': os.environ.get('TASKRC'),
    'prompt_description': 'True',
    'prompt_project': 'True',
    'default_project': '',
    'prompt_tags': 'True',
    'default_tags': 'mutt',
    'prompt_annotate': 'True',
    'default_annotate': 'True'
}


def load_config():
    """ loads config options
    """
    env = 'MUTTWARRIORRC'
    cfgdir = 'muttwarrior'
    cfgfile = 'muttwarrior.ini'
    rcfile = os.environ.get(env) or xbase.load_first_config(cfgdir, cfgfile)
    parser = SafeConfigParser(CONFIG_DEFAULT)
    parser.add_section(CFG_SECT)
    if rcfile and os.path.isfile(rcfile):
        parser.read(rcfile)
    return parser


def clean(subject):
    """ decode internationalized subject and transform ascii into utf8
    """
    subject = decode_header(subject)
    subject = ' '.join([unicode(t[0], t[1] or 'ASCII') for t in subject])
    subject = subject.encode('utf8')
    return subject


def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes": True,   "y": True,  "ye": True,
             "no": False,     "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")


def parse_mail():
    """ parses mail
    """

    mail = sys.stdin.read()
    message = email.message_from_string(mail)

    subject = clean(message['Subject'])
    messageid = 'Message-ID:%s' % clean(
        message['message-id'].replace('$', '\$'))
    return (subject, messageid)


def main(config):
    """ read from stdin and parse subject
    """

    warrior = TaskWarrior(config_filename=config.get(CFG_SECT, 'taskrc'))
    subject, messageid = parse_mail()

    # rebind sys.stdin to my tty
    sys.stdin = open("/dev/tty")

    # get description
    if config.getboolean(CFG_SECT, 'prompt_description'):
        desc = raw_input('Description [%s]: ' % subject) or subject
    else:
        desc = subject

    # get project
    if config.getboolean(CFG_SECT, 'prompt_project'):
        proj = raw_input('Project [None]: ') or config.get(
            CFG_SECT,
            'default_project')
    else:
        proj = config.get(CFG_SECT, 'default_project')

    # get tags
    if config.getboolean(CFG_SECT, 'prompt_tags'):
        tags = raw_input('Tags [None]: ').split() + config.get(
            CFG_SECT,
            'default_tags').split()
    else:
        tags = config.get(CFG_SECT, 'default_tags')

    # annotate?
    if config.getboolean(CFG_SECT, 'prompt_annotate'):
        anno = query_yes_no('Annotate?')
    else:
        anno = config.getboolean(CFG_SECT, 'default_annotate')

    # pprint({
    #     'desc': desc,
    #     'proj': proj,
    #     'tags': tags,
    #     'anno': anno,
    #     'msgi': messageid
    #     })

    # add task
    added_task = warrior.task_add(
        description=desc,
        tags=tags,
        project=proj)

    if anno:
        warrior.task_annotate(
            added_task,
            messageid)


if __name__ == "__main__":
    main(load_config())
